# 전체 프로젝트 Docker Build & Push + Helm Chart Build & Push 명령어 모음
# 프로젝트 루트: C:\Users\INSoft\.git\queue
# Harbor URL: 123.212.43.8:41000
# 프로젝트명: queue
# 버전: 0.1.0 (이미지 및 차트)

# ===========================================
# 1. Docker 이미지 빌드 및 푸시
# ===========================================

# 1-1. Queue Service (Backend) - Java Spring Boot
cd queue-backend\java
docker build -t 123.212.43.8:41000/queue/queue-service:latest -t 123.212.43.8:41000/queue/queue-service:0.1.0 .
docker push 123.212.43.8:41000/queue/queue-service:latest
docker push 123.212.43.8:41000/queue/queue-service:0.1.0

# 1-2. Auth Service (Login) - Java Spring Boot
cd ..\..\queue-login
docker build -t 123.212.43.8:41000/queue/auth-service:latest -t 123.212.43.8:41000/queue/auth-service:0.1.0 .
docker push 123.212.43.8:41000/queue/auth-service:latest
docker push 123.212.43.8:41000/queue/auth-service:0.1.0

# 1-3. Portal (Frontend) - React + TypeScript + Vite
cd ..\queue-portal\temp-project
docker build -t 123.212.43.8:41000/queue/portal:latest -t 123.212.43.8:41000/queue/portal:0.1.0 .
docker push 123.212.43.8:41000/queue/portal:latest
docker push 123.212.43.8:41000/queue/portal:0.1.0

# ===========================================
# 2. Helm 차트 빌드 및 푸시
# ===========================================

# 2-1. 차트 패키징 및 푸시 디렉토리로 이동
cd ..\..\queue-infra\scripts

# 2-2. 패키지 디렉토리 생성
if (!(Test-Path "./packages")) { New-Item -ItemType Directory -Path "./packages" }

# 2-3. 각 차트 패키징 및 푸시
# Backend 차트
helm package "../backend" --destination "./packages" --version "v0.1.0"
helm push "./packages/queue-service-0.1.0.tgz" oci://123.212.43.8:41000/queue --insecure-skip-tls-verify

# Login 차트
helm package "../login" --destination "./packages" --version "v0.1.0"
helm push "./packages/auth-service-0.1.0.tgz" oci://123.212.43.8:41000/queue --insecure-skip-tls-verify

# Portal 차트
helm package "../portal" --destination "./packages" --version "v0.1.0"
helm push "./packages/portal-0.1.0.tgz" oci://123.212.43.8:41000/queue --insecure-skip-tls-verify

# Nginx 차트
helm package "../nginx" --destination "./packages" --version "v0.1.0"
helm push "./packages/nginx-0.1.0.tgz" oci://123.212.43.8:41000/queue --insecure-skip-tls-verify

# Redis Cluster 차트
helm package "../redis-cluster" --destination "./packages" --version "v0.1.0"
helm push "./packages/redis-cluster-0.1.0.tgz" oci://123.212.43.8:41000/queue --insecure-skip-tls-verify

# MariaDB 차트
helm package "../mariadb" --destination "./packages" --version "v0.1.0"
helm push "./packages/mariadb-0.1.0.tgz" oci://123.212.43.8:41000/queue --insecure-skip-tls-verify

# Mosquitto 차트
helm package "../mosquitto" --destination "./packages" --version "v0.1.0"
helm push "./packages/mosquitto-0.1.0.tgz" oci://123.212.43.8:41000/queue --insecure-skip-tls-verify

# ===========================================
# 3. 빌드 및 푸시 결과 확인
# ===========================================

# 3-1. Docker 이미지 확인
docker images | findstr "123.212.43.8:41000/queue"

# 3-2. Harbor UI에서 확인
# URL: https://123.212.43.8:41000/harbor/projects/queue
# 사용자: admin / Harbor12345

# ===========================================
# 4. 자동화 스크립트 사용법
# ===========================================

# 4-1. 모든 이미지와 차트를 한 번에 빌드/푸시
# .\queue-infra\scripts\build-and-push-all.ps1

# 4-2. Harbor에만 푸시 (이미지 + 차트)
# .\queue-infra\scripts\push-to-harbor-only.ps1

# 4-3. 차트만 푸시
# .\queue-infra\scripts\push-charts-direct.ps1

# ===========================================
# 5. 배포 명령어 예시
# ===========================================

# Harbor 레포지토리 추가
# helm repo add harbor oci://123.212.43.8:41000/queue --username admin --password Harbor12345 --insecure-skip-tls-verify

# 서비스 배포 예시
# helm upgrade --install queue-service harbor/queue-service --namespace queue-system
# helm upgrade --install auth-service harbor/auth-service --namespace queue-system
# helm upgrade --install portal harbor/portal --namespace queue-system

# ===========================================
# 6. 버전 관리
# ===========================================

# 이미지 태그: latest, 0.1.0
# 차트 버전: v0.1.0
# Harbor 프로젝트: queue
# 네임스페이스: queue (배포시)
